<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://mybatis.org/schema/mybatis-spring 
	 		http://mybatis.org/schema/mybatis-spring.xsd 
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://cxf.apache.org/jaxws  
        	http://cxf.apache.org/schemas/jaxws.xsd
        	http://cxf.apache.org/bindings/soap 
    		http://cxf.apache.org/schemas/configuration/soap.xsd 
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<context:component-scan base-package="dhr">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 该包下的类支持注解，表示会被当作{@code mybatis mapper}处理 配置了之后表示可以自动引入mapper类-->  
    <mybatis:scan base-package="dhr"/>

    <!-- Druid连接池配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" lazy-init="false">
    	<property name="filters" value="config" />
      	<property name="connectionProperties" value="config.file=classpath:druidConfig.properties" />
    </bean>
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" /> 
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
   		<constructor-arg index="0" ref="sqlSessionFactory"/>  
	</bean> 

	<!-- 配置事务管理器 调用实例： 1、@Transactional 2、@Transactional(rollbackFor=Exception.class) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务传播特性,注解方式 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="sm" expression="execution(* dhr.ldap.webservice.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="sm"/>
    </aop:config>
	
	<!-- Druid AOP配置 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>dhr.*</value>
			</list>
		</property>
	</bean>
	
	<!-- 打开监控 -->
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- 切面工具  -->
	<aop:aspectj-autoproxy />
	
	<import resource="cxf-servlet.xml" />
</beans>